{"version":3,"sources":["robots.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","props","className","alt","src","CardList","map","user","i","key","App","onSearchChange","event","setState","searchfield","target","value","submitHandler","alert","state","preventDefault","filteredRobots","this","filter","toLowerCase","includes","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAAaA,EAAS,CAClB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC7CEC,EAZD,SAACC,GACX,OACI,yBAAKC,UAAU,wEACX,yBAAKC,IAAK,SAASC,IAAG,+BAA4BH,EAAML,GAAlC,cACtB,6BACI,4BAAKK,EAAMJ,MACX,2BAAII,EAAMF,UCcXM,EAnBE,SAAC,GAAgB,IAAdV,EAAa,EAAbA,OAChB,OACI,6BAEIA,EAAOW,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLZ,GAAMD,EAAOa,GAAGZ,GAChBC,KAAQF,EAAOa,GAAGX,KAClBE,MAAQJ,EAAOa,GAAGT,aC+B3BW,G,wDArCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAT/B,EAWdC,cAAgB,SAACL,GACbM,MAAM,GAAD,OAAI,EAAKC,MAAML,cACpBF,EAAMQ,kBAXN,EAAKD,MAAQ,CACTxB,OAAQA,EACRmB,YAAa,IAJP,E,qDAkBJ,IAAD,OACHO,EAAiBC,KAAKH,MAAMxB,OAAO4B,QAAO,SAAA5B,GACxC,OAAOA,EAAOE,KAAK2B,cAAcC,SAAS,EAAKN,MAAML,YAAYU,kBAErE,OACI,yBAAKtB,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,6BACI,2BAAOwB,KAAK,OAAOV,MAAOM,KAAKH,MAAML,YAAaa,SAAYL,KAAKX,iBACnE,4BAAQe,KAAK,SAASE,QAASN,KAAKL,eAApC,WAEJ,kBAAC,EAAD,CAAUtB,OAAU0B,S,GA9BlBQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.022e0984.chunk.js","sourcesContent":["export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\n\r\n const Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 ma3 hover-bg-dark-green grow bw5 shadown-5'>\r\n            <img alt =\"robots\" src = {`https://robohash.org/${props.id}?200x200`}/ >\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user,i) => {\r\n                return ( \r\n                    <Card \r\n                        key={i}\r\n                        id = {robots[i].id}\r\n                        name = {robots[i].name}\r\n                        email= {robots[i].email}\r\n                    />\r\n            );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n    }  \r\n\r\nexport default CardList;","import React,{ Component } from 'react';\r\nimport { robots } from './robots';\r\nimport CardList from './CardList';\r\n// import SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    submitHandler = (event) => {\r\n        alert(`${this.state.searchfield}`)\r\n        event.preventDefault()\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n    const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <div>\r\n                    <input type=\"text\" value={this.state.searchfield} onChange = {this.onSearchChange}/>\r\n                    <button type=\"submit\" onClick={this.submitHandler}>Search</button>\r\n                </div>\r\n                <CardList robots = {filteredRobots}/>\r\n                \r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}